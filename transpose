> (define t
    (lambda (l)
      (cond
        ((null? l) )
        (else
         (cond
           ((null? (cdr l)) (car l))
            (else
               (cons (cons  (list (car (cdr l)))  (car l)) (t (cdr (cdr l))))))))
    ))
> (t '(a b))
'(((b) . a) . #t)
> (t '(a b c))
'(((b) . a) . c)
> (t '(a b c d))
'(((b) . a) ((d) . c) . #t)
> (t '(a b c d e f))
'(((b) . a) ((d) . c) ((f) . e) . #t)
